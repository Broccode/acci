# syntax=docker/dockerfile:1.4

# Builder stage
FROM rust:1.75-slim-bookworm as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy manifests
COPY Cargo.toml Cargo.lock ./
COPY crates/acci-core/Cargo.toml ./crates/acci-core/
COPY crates/acci-api/Cargo.toml ./crates/acci-api/
COPY crates/acci-auth/Cargo.toml ./crates/acci-auth/
COPY crates/acci-db/Cargo.toml ./crates/acci-db/
COPY crates/acci-frontend/Cargo.toml ./crates/acci-frontend/

# Create dummy source files for dependency build
RUN mkdir -p crates/acci-api/src \
    && echo "// Dummy file" > crates/acci-api/src/lib.rs \
    && mkdir -p crates/acci-auth/src \
    && echo "// Dummy file" > crates/acci-auth/src/lib.rs \
    && mkdir -p crates/acci-db/src \
    && echo "// Dummy file" > crates/acci-db/src/lib.rs \
    && mkdir -p crates/acci-frontend/src \
    && echo "// Dummy file" > crates/acci-frontend/src/lib.rs

# Build dependencies
RUN cargo build --release

# Copy source code
COPY . .

# Build application
RUN cargo build --release

# Runtime stage
FROM gcr.io/distroless/cc-debian12 as runtime

# Copy binary from builder
COPY --from=builder /app/target/release/acci /usr/local/bin/

# Copy frontend assets
COPY --from=builder /app/crates/acci-frontend/dist /usr/local/share/acci/frontend

# Set environment variables
ENV RUST_LOG=info
ENV FRONTEND_ASSETS=/usr/local/share/acci/frontend

# Expose ports
EXPOSE 8000

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/acci"] 