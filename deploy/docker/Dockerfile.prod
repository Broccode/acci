# syntax=docker/dockerfile:1.4

# Builder stage
FROM rust:1.84.1-slim-bookworm as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy manifests
COPY Cargo.toml Cargo.lock ./
COPY crates/acci-core/Cargo.toml ./crates/acci-core/
COPY crates/acci-api/Cargo.toml ./crates/acci-api/
COPY crates/acci-auth/Cargo.toml ./crates/acci-auth/
COPY crates/acci-db/Cargo.toml ./crates/acci-db/
COPY crates/acci-frontend/Cargo.toml ./crates/acci-frontend/

# Remove tests from workspace members
RUN sed -i 's/"tests",//' Cargo.toml

# Create dummy source files for dependency build
RUN mkdir -p src && echo "//! ACCI - Enterprise Application Framework\n//!\n//! Main binary for the ACCI application.\n\n/// Main entry point for the ACCI application\nfn main() {}" > src/main.rs

# Create dummy source files for crates
RUN mkdir -p crates/acci-core/src && \
    echo "pub fn dummy() {}" > crates/acci-core/src/lib.rs && \
    mkdir -p crates/acci-api/src && \
    echo "pub fn dummy() {}" > crates/acci-api/src/lib.rs && \
    echo "fn main() {}" > crates/acci-api/src/main.rs && \
    mkdir -p crates/acci-auth/src && \
    echo "pub fn dummy() {}" > crates/acci-auth/src/lib.rs && \
    mkdir -p crates/acci-db/src && \
    echo "pub fn dummy() {}" > crates/acci-db/src/lib.rs && \
    echo "fn main() {}" > crates/acci-db/src/main.rs && \
    mkdir -p crates/acci-db/src/bin && \
    echo "fn main() {}" > crates/acci-db/src/bin/acci-db.rs && \
    echo "fn main() {}" > crates/acci-db/src/bin/hash_passwords.rs && \
    echo "fn main() {}" > crates/acci-db/src/bin/test_users.rs && \
    mkdir -p crates/acci-frontend/src && \
    echo "pub fn dummy() {}" > crates/acci-frontend/src/lib.rs

# Build dependencies
RUN cargo build --release --workspace --exclude tests

# Remove the dummy source files
RUN rm -rf ./crates/*/src

# Copy actual source code
COPY crates/acci-core/src ./crates/acci-core/src
COPY crates/acci-api/src ./crates/acci-api/src
COPY crates/acci-auth/src ./crates/acci-auth/src
COPY crates/acci-db/src ./crates/acci-db/src
COPY crates/acci-frontend/src ./crates/acci-frontend/src

# Build application
RUN cargo build --release --workspace --exclude tests

# Runtime stage
FROM gcr.io/distroless/cc-debian12 as runtime

# Copy binary from builder
COPY --from=builder /app/target/release/acci /usr/local/bin/

# Copy frontend assets
# COPY --from=builder /app/crates/acci-frontend/dist /usr/local/share/acci/frontend

# Set environment variables
ENV RUST_LOG=info
ENV FRONTEND_ASSETS=/usr/local/share/acci/frontend

# Expose ports
EXPOSE 8000

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/acci"]
