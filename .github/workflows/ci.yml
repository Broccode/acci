name: CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, llvm-tools-preview

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check format
        run: cargo fmt --all -- --check

      - name: Run clippy (lib and bins only)
        run: cargo clippy --lib --bins --all-features -- -D warnings

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install cargo-mutants
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-mutants

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      - name: Generate code coverage
        run: |
          # Generate detailed coverage report
          cargo llvm-cov --lib --bins --all-features --workspace --lcov --output-path lcov.info
          # Generate JSON report for metrics
          cargo llvm-cov --lib --bins --all-features --workspace --json --output-path coverage.json

      - name: Run mutation testing
        run: |
          cargo mutants --all --json > mutation-report.json
          # Check mutation score
          score=$(jq '.score' mutation-report.json)
          if (( $(echo "$score < 80" | bc -l) )); then
            echo "Mutation score below threshold: $score% < 80%"
            exit 1
          fi

      - name: Run performance benchmarks
        run: |
          cargo bench --workspace --json > benchmark-results.json
          # Check for performance regressions
          ./scripts/check-performance.sh benchmark-results.json

      - name: Generate test metrics report
        run: |
          ./scripts/generate-test-metrics.sh \
            --coverage coverage.json \
            --mutation mutation-report.json \
            --benchmarks benchmark-results.json \
            --output test-metrics.json

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2.2.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: lcov.info

      - name: Upload test metrics
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics
          path: |
            coverage.json
            mutation-report.json
            benchmark-results.json
            test-metrics.json

      - name: Run unit tests
        run: cargo test --lib --bins --all-features --workspace --exclude acci-tests

      - name: Run integration tests
        run: cargo test -p acci-tests --lib --all-features

      - name: Push metrics to Prometheus
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          ./scripts/push-metrics.sh \
            --metrics test-metrics.json \
            --endpoint ${{ secrets.PROMETHEUS_PUSHGATEWAY }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: |
          cargo audit --ignore RUSTSEC-2023-0071 --json > security-audit.json
          # Check for critical vulnerabilities
          if jq -e '.vulnerabilities[] | select(.severity == "Critical")' security-audit.json; then
            echo "Critical vulnerabilities found!"
            exit 1
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-audit.json

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-cyclonedx
        run: cargo install cargo-cyclonedx

      - name: Generate SBOM
        run: cargo cyclonedx -f json --override-filename bom

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: bom.json

  deny-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Check licenses
        run: cargo deny check licenses
