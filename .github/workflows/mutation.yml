name: Mutation Testing

on:
  # push:
  #   branches: [ "main", "master" ]
  # pull_request:
  #   branches: [ "main", "master" ]
  schedule:
    # Run every Sunday at 00:00 UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      timeout:
        description: 'Timeout per mutation in seconds'
        required: false
        default: '600'
        type: string
      threads:
        description: 'Number of parallel mutation threads'
        required: false
        default: '4'
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info
  DATABASE_URL: postgres://acci:development_only@localhost:5432/acci
  SQLX_OFFLINE: true

jobs:
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    env:
      MUTATION_TIMEOUT: ${{ inputs.timeout || 600 }}  # 10 minutes timeout per mutation
      MUTATION_THREADS: ${{ inputs.threads || 4 }}    # Number of parallel mutation threads
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better mutation analysis

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: mutation-testing

      - name: Install cargo-mutants
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-mutants

      - name: Create mutation config
        run: |
          cat > .mutants.toml << EOF
          timeout = ${MUTATION_TIMEOUT}
          threads = ${MUTATION_THREADS}

          # Define mutation operators
          [[operators]]
          name = "arithmetic"
          enabled = true

          [[operators]]
          name = "conditional"
          enabled = true

          [[operators]]
          name = "function"
          enabled = true

          # Exclude test files and generated code
          exclude = [
            "**/tests/**",
            "**/generated/**",
            "**/migrations/**"
          ]
          EOF

      - name: Run mutation tests
        id: mutation_tests
        run: |
          # Create output directory
          mkdir -p mutation-results

          # Run mutation testing with parallel execution
          cargo mutants \
            --workspace \
            --all-features \
            --test-workspace true \
            --output mutation-results \
            --json \
            2>&1 | tee mutation-results/mutation-output.log

          # Move the JSON output to our desired location
          if [ -f "mutation-results/mutants.out/outcomes.json" ]; then
            cp mutation-results/mutants.out/outcomes.json mutation-results/mutation-report.json
          fi

          # Check if JSON file exists and is valid
          if [ -f "mutation-results/mutation-report.json" ]; then
            # Extract and check mutation score with error handling
            if score=$(jq -e '.score' mutation-results/mutation-report.json 2>/dev/null); then
              echo "mutation_score=${score}" >> "$GITHUB_OUTPUT"

              if (( $(echo "$score < 80" | bc -l) )); then
                echo "::warning::Mutation score below threshold: $score% < 80%"
                echo "mutation_status=warning" >> "$GITHUB_OUTPUT"
              else
                echo "mutation_status=success" >> "$GITHUB_OUTPUT"
              fi
            else
              echo "::error::Failed to parse mutation score from JSON"
              echo "mutation_status=error" >> "$GITHUB_OUTPUT"
              exit 1
            fi
          else
            echo "::error::Mutation report JSON file not found"
            echo "mutation_status=error" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Generate mutation report
        if: always()
        run: |
          {
            echo "# Mutation Testing Report"
            echo "## Summary"
            echo "- Score: ${{ steps.mutation_tests.outputs.mutation_score }}%"
            echo "- Status: ${{ steps.mutation_tests.outputs.mutation_status }}"
            echo "- Timestamp: $(date -u)"
            echo
            echo "## Configuration"
            echo "\`\`\`toml"
            cat .mutants.toml
            echo "\`\`\`"
            echo
            echo "## Detailed Results"
            echo "See the HTML report in the artifacts for complete results."
            echo
            echo "### Failed Mutations"
            jq -r '.failed_mutations[] | "- " + .description' mutation-results/mutation-report.json || true
          } > mutation-results/mutation-report.md

      - name: Upload mutation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mutation-test-artifacts
          path: |
            mutation-results/
            .mutants.toml

      - name: Push metrics to Prometheus
        if: env.PROMETHEUS_PUSHGATEWAY != ''
        run: |
          # Prepare metrics for Prometheus
          {
            echo "# HELP test_mutation_score_percent Mutation testing score percentage"
            echo "# TYPE test_mutation_score_percent gauge"
            echo "test_mutation_score_percent{branch=\"${{ github.ref }}\",commit=\"${{ github.sha }}\"} ${{ steps.mutation_tests.outputs.mutation_score }}"
          } > mutation-metrics.txt

          # Push metrics to Prometheus Pushgateway
          cat mutation-metrics.txt | curl --data-binary @- "$PROMETHEUS_PUSHGATEWAY/metrics/job/acci_mutation/instance/${{ github.workflow }}"

      - name: Process mutation results
        if: always()
        run: |
          if [[ "${{ steps.mutation_tests.outputs.mutation_status }}" == "warning" ]]; then
            echo "::warning::Mutation score is below threshold. Check mutation-results/mutation-report.md for details."
          fi
