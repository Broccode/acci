name: Test Suite

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info
  DATABASE_URL: postgres://acci:development_only@localhost:5432/acci
  SQLX_OFFLINE: true
  CRITICAL_COVERAGE_THRESHOLD: 95
  CORE_COVERAGE_THRESHOLD: 90
  GENERAL_COVERAGE_THRESHOLD: 80

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: acci
          POSTGRES_PASSWORD: development_only
          POSTGRES_DB: acci
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
          cargo install cargo-llvm-cov

      - name: Run unit tests
        id: unit_tests
        run: |
          # Run tests and capture output
          make test-unit 2>&1 | tee test-output.log
          echo "status=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Generate coverage reports
        if: always()
        run: |
          # Create output directory
          mkdir -p target/coverage-report

          # Generate LCOV report
          cargo llvm-cov --lib --bins --all-features --workspace \
            --lcov --output-path target/coverage-report/lcov.info

          # Generate HTML report
          cargo llvm-cov --lib --bins --all-features --workspace \
            --html --output-dir target/coverage-report/html

          # Generate JSON report
          cargo llvm-cov --lib --bins --all-features --workspace \
            --json --output-path target/coverage-report/coverage.json

          # Generate summary
          cargo llvm-cov --lib --bins --all-features --workspace \
            --summary-only > target/coverage-report/coverage-summary.txt

      - name: Check coverage thresholds
        if: always()
        run: |
          chmod +x scripts/check-coverage.sh
          ./scripts/check-coverage.sh target/coverage-report/coverage.json 2>&1 | tee coverage-check.log

      - name: Upload coverage to Coveralls
        if: always()
        uses: coverallsapp/github-action@v2
        with:
          file: target/coverage-report/lcov.info

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-artifacts
          path: |
            test-output.log
            target/coverage-report/
            coverage-check.log

      - name: Process test results
        if: always()
        run: |
          if [[ "${{ steps.unit_tests.outputs.status }}" != "0" ]]; then
            echo "Unit tests failed. Check test-output.log for details."
            exit 1
          fi

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: acci
          POSTGRES_PASSWORD: development_only
          POSTGRES_DB: acci
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Set up test environment
        run: |
          # Create logs directory
          mkdir -p test-logs
          # Set up environment variables for detailed logging
          echo "RUST_LOG=debug" >> $GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
          echo "TEST_LOG_DIR=$(pwd)/test-logs" >> $GITHUB_ENV

      - name: Run integration tests
        id: integration_tests
        run: |
          # Run tests with detailed output
          RUST_LOG=debug make test-integration 2>&1 | tee test-logs/integration-test-output.log
          echo "status=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Collect container logs
        if: always()
        run: |
          # Collect Docker container logs
          docker ps -a > test-logs/docker-containers.log
          for container in $(docker ps -aq); do
            docker logs $container > test-logs/container-$container.log 2>&1
          done

      - name: Generate test report
        if: always()
        run: |
          # Generate a summary report
          {
            echo "# Integration Test Report"
            echo "## Test Execution Summary"
            echo "- Status: ${{ steps.integration_tests.outputs.status == '0' && 'Success' || 'Failure' }}"
            echo "- Timestamp: $(date -u)"
            echo "## Environment"
            echo "\`\`\`"
            env | grep -E "RUST_|TEST_|DATABASE_" | sort
            echo "\`\`\`"
            echo "## Test Output"
            echo "\`\`\`"
            tail -n 50 test-logs/integration-test-output.log
            echo "\`\`\`"
          } > test-logs/integration-test-report.md

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-artifacts
          path: |
            test-logs/
            target/debug/deps/*.d

      - name: Process test results
        if: always()
        run: |
          if [[ "${{ steps.integration_tests.outputs.status }}" != "0" ]]; then
            echo "Integration tests failed. Check test-logs/integration-test-output.log for details."
            exit 1
          fi

  metrics:
    name: Test Metrics
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    env:
      METRICS_DIR: test-metrics
      PROMETHEUS_PUSHGATEWAY: ${{ secrets.PROMETHEUS_PUSHGATEWAY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up metrics environment
        run: |
          mkdir -p $METRICS_DIR
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-*artifacts"
          merge-multiple: true
          path: ${{ env.METRICS_DIR }}/artifacts

      - name: Process coverage metrics
        id: coverage
        if: always()
        run: |
          if [ -f "$METRICS_DIR/artifacts/unit-test-artifacts/coverage.json" ]; then
            coverage=$(jq -r '.total.coverage' "$METRICS_DIR/artifacts/unit-test-artifacts/coverage.json")
            echo "coverage=${coverage}" >> "$GITHUB_OUTPUT"

            if (( $(echo "$coverage < $GENERAL_COVERAGE_THRESHOLD" | bc -l) )); then
              echo "::warning::Coverage below threshold: ${coverage}% < ${GENERAL_COVERAGE_THRESHOLD}%"
              echo "coverage_status=warning" >> "$GITHUB_OUTPUT"
            else
              echo "coverage_status=success" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "::warning::No coverage data found"
            echo "coverage_status=missing" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate metrics report
        if: always()
        run: |
          {
            echo "# Test Metrics Report"
            echo "## Summary"
            echo "- Coverage: ${{ steps.coverage.outputs.coverage }}% (${{ steps.coverage.outputs.coverage_status }})"
            echo "- Timestamp: $(date -u)"
            echo
            echo "## Coverage Details"
            if [ -f "$METRICS_DIR/artifacts/unit-test-artifacts/coverage-summary.txt" ]; then
              echo "\`\`\`"
              cat "$METRICS_DIR/artifacts/unit-test-artifacts/coverage-summary.txt"
              echo "\`\`\`"
            else
              echo "No coverage details available"
            fi
          } > "$METRICS_DIR/test-metrics-report.md"

      - name: Push metrics to Prometheus
        if: env.PROMETHEUS_PUSHGATEWAY != ''
        run: |
          # Prepare metrics for Prometheus
          {
            echo "# HELP test_coverage_percent Total test coverage percentage"
            echo "# TYPE test_coverage_percent gauge"
            echo "test_coverage_percent{branch=\"${{ github.ref }}\",commit=\"${{ github.sha }}\"} ${{ steps.coverage.outputs.coverage }}"
          } > "$METRICS_DIR/prometheus-metrics.txt"

          # Push metrics to Prometheus Pushgateway
          cat "$METRICS_DIR/prometheus-metrics.txt" | curl --data-binary @- "$PROMETHEUS_PUSHGATEWAY/metrics/job/acci_tests/instance/${{ github.workflow }}"

      - name: Upload consolidated metrics
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics-report
          path: |
            ${{ env.METRICS_DIR }}/test-metrics-report.md
            ${{ env.METRICS_DIR }}/prometheus-metrics.txt

      - name: Process overall status
        if: always()
        run: |
          if [[ "${{ steps.coverage.outputs.coverage_status }}" == "warning" ]]; then
            echo "::warning::Coverage is below threshold. Check test-metrics-report.md for details."
          fi
