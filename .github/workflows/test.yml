name: Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/acci_test
  CRITICAL_COVERAGE_THRESHOLD: 95
  CORE_COVERAGE_THRESHOLD: 90
  GENERAL_COVERAGE_THRESHOLD: 80

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check CHANGELOG.md update
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "CHANGELOG.md" || {
              echo "Error: CHANGELOG.md must be updated"
              exit 1
            }
          fi

  lint:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  unit-test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: acci_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
          cargo install cargo-llvm-cov

      - name: Run unit tests with coverage
        run: |
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
          cargo llvm-cov --all-features --workspace --html
          cargo llvm-cov --all-features --workspace --show-missing-lines

      - name: Check coverage thresholds
        run: |
          chmod +x scripts/check-coverage.sh
          ./scripts/check-coverage.sh

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          file: lcov.info
          format: lcov
          parallel: true
          flag-name: Unit-Tests

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            target/llvm-cov/html
            target/coverage-report
            lcov.info
            coverage.json

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: acci_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run integration tests
        run: cargo test --test '*' --workspace

  security:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-deny
          cargo install cargo-cyclonedx

      - name: Run security audit
        run: |
          cargo audit
          echo "# Security Audit Report" > security-report.md
          echo "## Vulnerabilities" >> security-report.md
          cargo audit --json | jq -r '.vulnerabilities[] | "- " + .advisory.title + " (" + .advisory.id + ")"' >> security-report.md

      - name: Check dependencies
        run: |
          cargo deny check
          echo "## Dependency Check" >> security-report.md
          echo "✓ All dependency checks passed" >> security-report.md

      - name: Generate SBOM
        run: |
          cargo cyclonedx
          echo "## Software Bill of Materials" >> security-report.md
          echo "- Generated: $(date)" >> security-report.md
          echo "- Format: CycloneDX" >> security-report.md

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            security-report.md
            bom.xml

  metrics:
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports

      - name: Generate metrics report
        run: |
          echo "# Test Metrics Report" > metrics-report.md
          echo "## Coverage Summary" >> metrics-report.md
          cat target/coverage-report/report.md >> metrics-report.md
          echo "## Test Execution Time" >> metrics-report.md
          echo "- Unit Tests: ${{ needs.unit-test.outputs.duration }}" >> metrics-report.md
          echo "- Integration Tests: ${{ needs.integration-test.outputs.duration }}" >> metrics-report.md

      - name: Upload metrics report
        uses: actions/upload-artifact@v3
        with:
          name: metrics-report
          path: metrics-report.md

      - name: Check metrics thresholds
        run: |
          if [[ -f coverage.json ]]; then
            TOTAL_COVERAGE=$(jq -r '.total.coverage' coverage.json)
            if (( $(echo "$TOTAL_COVERAGE < $GENERAL_COVERAGE_THRESHOLD" | bc -l) )); then
              echo "❌ Total coverage ($TOTAL_COVERAGE%) below threshold ($GENERAL_COVERAGE_THRESHOLD%)"
              exit 1
            fi
          fi
